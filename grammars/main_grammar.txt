# General

program -> declarationList
declarationList -> declarationList declaration | declaration
declaration -> varDec | functionDeclaration | includeStatement

# Variable Declarations
# Assignment uses the ID = ___ form so that the ID node is always in the same place in the parse tree.
# TODO: rework this so ID is first child of the lower level nodes

varDec -> typeSpecifier ID = expression ; | typeSpecifier ID ;
assignment -> ID = callStatement | ID = expression ; | ID incEqualAssignment | ID decEqualAssignment | ID incAssignment | ID decAssignment
incEqualAssignment -> += expression ;
decEqualAssignment -> -= expression ;
incAssignment -> ++ ;
decAssignment -> -- ;

# Function Declarations

functionDeclaration -> typeSpecifier ID ( argList ) { statementList }
argList -> argList , arg | arg | EMPTY
arg -> typeSpecifier ID | typeSpecifier

# Statements

statementList -> statementList statement | statement
statement -> varDec | returnStatement | ifStatement | assignment | includeStatement | forStatement | callStatement
returnStatement -> return expression ;
includeStatement -> fileName
callStatement -> ID ( paramList ) ;
paramList -> paramList , param | param | EMPTY

# Something about param is messed up...
param -> constNum | ID

# Control Flow

ifStatement -> if ( expression ) { statementList } | if ( expression ) { statementList } elseStatement
elseStatement -> else { statementList }
forStatement -> for ( assignment expression ; ID ++ ) { statementList }

# Expressions

expression -> a

# Boolean operations
a -> boolAnd | boolOr | c

boolAnd -> c && a
boolOr -> c || a

c -> boolNot | d
boolNot -> ! d

# Comparisons
d -> lteExpr | gteExpr | ltExpr | gtExpr | neExpr | eExpr | e
lteExpr -> e <= d
gteExpr -> e >= d
ltExpr -> e < d
gtExpr -> e > d
neExpr -> e != d
eExpr -> e == d

# Multiplication and addition
e -> addExpr | subExpr | f
addExpr -> f + e
subExpr -> f - e

f -> multExpr | divExpr | modExpr | g
multExpr -> g * f
divExpr -> g / f
modExpr -> g % f

# Immutables
g -> constNum | ID | str | nestedExpr
nestedExpr -> ( expression )
