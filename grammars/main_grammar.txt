# General

program -> declarationList
declarationList -> declarationList declaration | declaration
declaration -> varDec | functionDeclaration | includeStatement

# Variable Declarations

varDec -> typeSpecifier ID = expression ; | typeSpecifier ID ;
assignment -> ID = expression ; | ID incEqualAssignment | ID decEqualAssignment | ID incAssignment | ID decAssignment
incEqualAssignment -> += expression ;
decEqualAssignment -> -= expression ;
incAssignment -> ++ ;
decAssignment -> -- ;

# Function Declarations

functionDeclaration -> typeSpecifier ID ( ) { statementList }

# Statements

statementList -> statementList statement | statement
statement -> varDec | returnStatement | ifStatement | assignment | includeStatement | forStatement | callStatement
returnStatement -> return expression ;
includeStatement -> fileName
callStatement -> ID ( str ) ;

# Control Flow

ifStatement -> if ( expression ) { statementList } | if ( expression ) { statementList } elseStatement
elseStatement -> else { statementList }
forStatement -> for ( assignment expression ; ID ++ ) { statementList }

# Expressions

expression -> a

# Boolean operations
a -> boolAnd | boolOr | c

boolAnd -> c && a
boolOr -> c || a

# Not working, overlap with notEqualExpr -> e != d rule?
#c -> ! c | d
c -> d

# Comparisons
d -> lteExpr | gteExpr | ltExpr | gtExpr | neExpr | eExpr | e
lteExpr -> e <= d
gteExpr -> e >= d
ltExpr -> e < d
gtExpr -> e > d
neExpr -> e != d
eExpr -> e == d

# Multiplication and addition
e -> addExpr | subExpr | f
addExpr -> f + e
subExpr -> f - e

f -> multExpr | divExpr | modExpr | g
multExpr -> g * f
divExpr -> g / f
modExpr -> g % f

# Immutables
g -> constNum | ID | str | ( expression )
