# General

program -> declarationList
declarationList -> declarationList declaration | declaration
declaration -> varDec | functionDeclaration | includeStatement

# Variable Declarations

varDec -> typeSpecifier ID = expression ; | typeSpecifier ID ;
assignment -> exprAssignment | incEqualAssignment | decEqualAssignment | incAssignment | decAssignment
exprAssignment -> ID = expression ;
incEqualAssignment -> ID += expression ;
decEqualAssignment -> ID -= expression ;
incAssignment -> ID ++ ;
decAssignment -> ID -- ;

# Function Declarations

functionDeclaration -> typeSpecifier ID ( argList ) { statementList }
argList -> argList , arg | arg | EMPTY
arg -> typeSpecifier ID | typeSpecifier

# Other Declarations

labelDeclaration -> label statementListNew
statementListNew -> statementListNew statementNew | statementNew
statementNew -> varDec | returnStatement | ifStatement | assignment | includeStatement | forStatement | whileStatement | callStatement ; | gotoStatement

# Statements

statementList -> statementList statement | statement
statement -> varDec | returnStatement | ifStatement | assignment | includeStatement | forStatement | whileStatement | callStatement ; | gotoStatement | labelDeclaration
returnStatement -> return expression ;
includeStatement -> fileName
callStatement -> ID ( paramList )
gotoStatement -> goto ID ;
paramList -> paramList , param | param | EMPTY
param -> constNum | ID | str

# Control Flow

ifStatement -> if ( condition ) { statementList } | if ( condition ) { statementList } elseStatement
condition -> expression
elseStatement -> else { statementList }
forStatement -> for ( assignment expression ; ID ++ ) { statementList }
whileStatement -> while ( whileCondition ) { statementList }
whileCondition -> expression

# Expressions

expression -> a

# Boolean operations
a -> boolAnd | boolOr | c

boolAnd -> c && a
boolOr -> c || a

c -> boolNot | d
boolNot -> ! d

# Comparisons
d -> lteExpr | gteExpr | ltExpr | gtExpr | neExpr | eExpr | e
lteExpr -> e <= d
gteExpr -> e >= d
ltExpr -> e < d
gtExpr -> e > d
neExpr -> e != d
eExpr -> e == d

# Multiplication and addition
e -> addExpr | subExpr | f
addExpr -> f + e
subExpr -> f - e

f -> multExpr | divExpr | modExpr | g
multExpr -> g * f
divExpr -> g / f
modExpr -> g % f

# Immutables
g -> constNum | ID | str | callStatement | nestedExpr
nestedExpr -> ( expression )
